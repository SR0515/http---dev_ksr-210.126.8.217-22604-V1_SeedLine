<script lang="ts">
    import { onMount } from 'svelte';
    import LogsSearch from '$lib/components/logs/LogsSearch.svelte';
    import LogsPagination from '$lib/components/logs/LogsPagination.svelte';
    import { 
        fetchLogData, 
        validateDateRange, 
        getUserTypeLabel, 
        getUserRateLabel, 
        getLoginStatusLabel 
    } from '$lib/utils/logsUtils';
    
    // 상태 관리
    let loading = false;
    let logLists: any[] = [];
    let currentPage = 1;
    let totalPages = 1;
    let totalCount = 0;
    let pageSize = 10;
    
    // 검색 상태
    let searchSelect = 'id';
    let searchText = '';
    let typeSelect = '';
    let startDate = '';
    let endDate = '';
    
    // 데이터 조회
    async function loadLogData() {
        if (!validateDateRange(startDate, endDate)) {
            return;
        }
        
        try {
            loading = true;
            const result = await fetchLogData('LoginLog', currentPage, pageSize, {
                searchSelect,
                searchText,
                typeSelect,
                startDate,
                endDate
            });
            
            logLists = result.data;
            totalCount = result.pagination.totalCount;
            totalPages = Math.ceil(totalCount / pageSize);
        } catch (error) {
            console.error('로그 데이터 로드 실패:', error);
        } finally {
            loading = false;
        }
    }
    
    // 검색 실행
    function handleSearch() {
        currentPage = 1;
        loadLogData();
    }
    
    // 검색 초기화
    function handleReset() {
        searchText = '';
        searchSelect = 'id';
        typeSelect = '';
        startDate = '';
        endDate = '';
        currentPage = 1;
        loadLogData();
    }
    
    // 페이지 크기 변경
    function handlePageSizeChange() {
        currentPage = 1;
        loadLogData();
    }
    
    // 페이지 이동
    function handlePageChange(page: number) {
        currentPage = page;
        loadLogData();
    }
    
    onMount(() => {
        loadLogData();
    });
</script>

<svelte:head>
    <title>로그 조회 - 로그인</title>
</svelte:head>

<LogsSearch 
    bind:searchSelect
    bind:searchText
    bind:typeSelect
    bind:startDate
    bind:endDate
    bind:pageSize
    onSearch={handleSearch}
    onReset={handleReset}
    onPageSizeChange={handlePageSizeChange}
/>

<!-- 로딩 상태 -->
{#if loading}
    <div class="loading_wrap">
        <p>데이터를 불러오는 중입니다...</p>
    </div>
{/if}

<!-- 테이블 -->
<section class="borderbox_table">
    <div class="table_wrap">
        <div class="table_responsive">
            <table class="table_list" width="100%">
                <caption>관리자 로그인 로그 테이블</caption>
                
                <colgroup>
                    <col class="col_no">
                    <col class="col_id">
                    <col class="col_name">
                    <col class="col_type">
                    <col class="col_rate">
                    <col class="col_date">
                    <col class="col_ip">
                    <col class="col_browser">
                    <col class="col_url">
                    <col class="col_status">
                    <col class="col_detail">
                </colgroup>
                
                <thead>
                    <tr>
                        <th>No</th>
                        <th>아이디</th>
                        <th>사용자명</th>
                        <th>타입</th>
                        <th>등급</th>
                        <th>시도일자</th>
                        <th>IP</th>
                        <th>브라우저</th>
                        <th>URL</th>
                        <th>로그인 상태</th>
                        <th>실패 사유</th>
                    </tr>
                </thead>
                
                <tbody>
                    {#if logLists.length === 0}
                        <tr>
                            <td colspan="11" class="no_data">등록된 데이터가 없습니다.</td>
                        </tr>
                    {:else}
                        {#each logLists as log, index}
                            <tr>
                                <td>{totalCount - ((currentPage - 1) * pageSize) - index}</td>
                                <td class="text_ellipsis">{log.id || ''}</td>
                                <td class="text_ellipsis">{log.name || ''}</td>
                                <td>{getUserTypeLabel(log.type)}</td>
                                <td>{getUserRateLabel(log.rate)}</td>
                                <td class="wd_date">{log.date || ''}</td>
                                <td class="text_ellipsis">{log.ip || ''}</td>
                                <td class="text_ellipsis">{log.browser || ''}</td>
                                <td class="text_ellipsis">{log.url || ''}</td>
                                <td>
                                    {@const status = getLoginStatusLabel(log.login_status)}
                                    <span style="color: {status.color};">{status.text}</span>
                                </td>
                                <td class="text_ellipsis">{log.fail_detail || ''}</td>
                            </tr>
                        {/each}
                    {/if}
                </tbody>
            </table>
        </div>
    </div>
</section>

<!-- 목록으로 버튼 -->
<div class="list_box">
    <button 
        class="defer_btn" 
        type="button" 
        on:click={() => window.history.back()}
    >
        목록으로
    </button>
</div>

<!-- 페이지네이션 -->
<LogsPagination 
    {currentPage}
    {totalPages}
    onPageChange={handlePageChange}
/>

<style>
    .loading_wrap {
        text-align: center;
        padding: 2rem;
    }
    
    .table_responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    .text_ellipsis {
        max-width: 150px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .col_no { width: 6.67%; }
    .col_id { width: 10%; }
    .col_name { width: 8%; }
    .col_type { width: 6%; }
    .col_rate { width: 8%; }
    .col_date { width: 12%; }
    .col_ip { width: 10%; }
    .col_browser { width: 10%; }
    .col_url { width: 15%; }
    .col_status { width: 8%; }
    .col_detail { width: 15%; }
    
    @media (max-width: 768px) {
        .table_responsive {
            font-size: 0.8rem;
        }
        
        .text_ellipsis {
            max-width: 100px;
        }
        
        .col_no { width: 5%; }
        .col_id { width: 12%; }
        .col_name { width: 10%; }
        .col_type { width: 8%; }
        .col_rate { width: 10%; }
        .col_date { width: 15%; }
        .col_ip { width: 12%; }
        .col_browser { width: 8%; }
        .col_url { width: 8%; }
        .col_status { width: 8%; }
        .col_detail { width: 4%; }
    }
</style>